# Inspired by the cypress workflow on GeoNature
# https://github.com/PnX-SI/GeoNature/blob/master/.github/workflows/cypress.yml
name: cypress

on:
  pull_request:
    paths:
      - 'frontend/**'
      - '.github/workflows/cypress.yml'
  push:
    paths:
      - 'frontend/**'
      - '.github/workflows/cypress.yml'

env:
  gn_module_monitoring_ref: "1.1.0"

jobs:
  mount_app_and_run_cypress:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ghcr.io/pnx-si/geonature-db:latest
        env:
          POSTGRES_DB: geonature2db
          POSTGRES_PASSWORD: geonatadmin
          POSTGRES_USER: geonatadmin
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      MODULE_DIR: ${{ github.workspace }}/extra/${{ github.event.repository.name }}
    steps:
      - name: Clone GeoNature
        uses: actions/checkout@v4
        with:
          repository: pnx-si/geonature
          ref: "2.16.2"
          submodules: true
      - name: Clone gn_module_monitoring
        uses: actions/checkout@v4
        with:
          repository: pnx-si/gn_module_monitoring
          ref: ${{ env.gn_module_monitoring_ref }}
          path: ${{ github.workspace }}/extra/gn_module_monitoring
      - name: Clone ${{ github.event.repository.name }} module
        uses: actions/checkout@v4
        with:
          path: ${{ env.MODULE_DIR }}

      # Setup Python and install backend deps (with cache)
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install python dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          python -m pip install \
            pytest-cov \
            -e ..[tests] \
            -r requirements-dev.txt

      # Setup node and cache for npm packages
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Fetch node version
        run: echo "NODE_VERSION=$(cat ./frontend/.nvmrc)" >> "$GITHUB_ENV"
      - name: Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Proceed with GeoNature installation (config + extra modules)
      - name: Generate frontend config (--ci => without install)
        run: |
          cp ./config/settings.ini.sample ./config/settings.ini
          ./install/05_install_frontend.sh --ci
        env:
          GEONATURE_CONFIG_FILE: '${{ github.workspace }}/config/test_config.toml'
      - name: Install core modules
        run: |
          # --upgrade-db is false because those modules are already in the pre-populated DB
          geonature install-gn-module contrib/occtax --build=false --upgrade-db=false
          geonature install-gn-module contrib/gn_module_occhab --build=false --upgrade-db=false
          geonature install-gn-module contrib/gn_module_validation --build=false --upgrade-db=false
          geonature db upgrade occtax-samples-test@head
          geonature db upgrade occhab-samples@head
          geonature db upgrade import-samples@head
          geonature db autoupgrade
          geonature permissions supergrant --group --nom "Grp_admin" --yes
        env:
          GEONATURE_CONFIG_FILE: '${{ github.workspace }}/config/test_config.toml'
      - name: Install gn_module_monitoring module
        run: |
          geonature install-gn-module ${{ github.workspace }}/extra/gn_module_monitoring --build=false
        env:
          GEONATURE_CONFIG_FILE: '${{ github.workspace }}/config/test_config.toml'
      - name: Install Calculatrice module
        run: |
          geonature install-gn-module ${MODULE_DIR} --build=false
          geonature db upgrade calculatrice@head
          geonature db autoupgrade
          geonature permissions supergrant --group --nom "Grp_admin" --yes
        env:
          GEONATURE_CONFIG_FILE: '${{ github.workspace }}/config/test_config.toml'

      # Install frontend deps for GeoNature (with cache)
      - name: Cache node modules for GeoNature
        id: cache-gn-node
        uses: actions/cache@v3
        with:
          path: ./frontend/node_modules
          key: geonature-node-${{ hashFiles('./frontend/package-lock.json') }}
          restore-keys: |
            geonature-node-
      - if: ${{ steps.cache-gn-node.outputs.cache-hit != 'true' }}
        name: Install frontend dependencies
        run: |
          cd ./frontend
          npm ci

      # Install frontend deps for calculatrice module (with cache)
      - name: Cache node modules for calculatrice module
        id: cache-calc-node
        uses: actions/cache@v3
        with:
          path: ${{ env.MODULE_DIR }}/frontend/node_modules
          key: calculatrice-node-${{ hashFiles('./frontend/package-lock.json') }}
          restore-keys: |
            calculatrice-node-
      - name: Cache cypress binary for calculatrice module
        uses: actions/cache@v3
        env:
          lock-file: '${{ env.MODULE_DIR }}/frontend/package-lock.json'
        with:
          path: /home/runner/.cache/Cypress
          key: calculatrice-cypress-bin-${{ hashFiles(env.lock-file) }}
      - if: ${{ steps.cache-calc-node.outputs.cache-hit != 'true' }}
        name: Install calculatrice frontend dependencies
        run: |
          cd "${{ env.MODULE_DIR }}/frontend"
          npm ci

      # Run GeoNature application & worker
      - name: Run GeoNature backend
        run: geonature dev_back &
        env:
          GEONATURE_CONFIG_FILE: '${{ github.workspace }}/config/test_config.toml'
      - name: Run celery
        run: celery -A geonature.celery_app:app worker &
        working-directory: ./backend/geonature/
        env:
          GEONATURE_CONFIG_FILE: '${{ github.workspace }}/config/test_config.toml'
      - name: Run GeoNature frontend
        run: |
          cd ./frontend
          npm run start &
        env:
          GEONATURE_CONFIG_FILE: '${{ github.workspace }}/config/test_config.toml'

      # Run frontend tests with Cypress
      - name: cypress
        run: |
          cd "${{ env.MODULE_DIR }}/frontend"
          npx cypress run
