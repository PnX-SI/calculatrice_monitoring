# This workflow is a fork of the reusable workflow gn-module-pytest
# at https://github.com/PnX-SI/GeoNature/blob/2.16.2/.github/workflows/gn-module-pytest.yml
# The fork is necessary because one needs to install the gn_module_monitoring
# module and the reusable workflow only installs contrib modules.

name: pytest

env:
  geonature_ref: "2.16.2"
  gn_module_monitoring_ref: "1.1.0"
  upload_coverage: true

on:
  pull_request:
    paths:
      - 'backend/**'
      - '.github/workflows/pytest.yml'
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/pytest.yml'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        debian-version: ['11', '12']
        include:
          - debian-version: '11'
            python-version: '3.9'
            postgres-version: '13'
            postgis-version: '3.2'
          - debian-version: '12'
            python-version: '3.11'
            postgres-version: '15'
            postgis-version: '3.3'

    name: Debian ${{ matrix.debian-version }}

    services:
      postgres:
        image: ghcr.io/pnx-si/geonature-db:2.16.2
        env:
          POSTGRES_DB: geonature2db
          POSTGRES_PASSWORD: geonatadmin
          POSTGRES_USER: geonatadmin
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      MODULE_DIR: ${{ github.workspace }}/extra/${{ github.event.repository.name }}

    steps:
      - name: Clone GeoNature
        uses: actions/checkout@v4
        with:
          repository: pnx-si/geonature
          ref: ${{ env.geonature_ref }}
          submodules: true
      - name: Clone gn_module_monitoring
        uses: actions/checkout@v4
        with:
          repository: pnx-si/gn_module_monitoring
          ref: ${{ env.gn_module_monitoring_ref }}
          path: ${{ github.workspace }}/extra/gn_module_monitoring
      - name: Clone ${{ github.event.repository.name }} module
        uses: actions/checkout@v4
        with:
          path: ${{ env.MODULE_DIR }}
      - name: Add database extensions
        run: |
          psql -h localhost -U geonatadmin -d geonature2db -f install/assets/db/add_pg_extensions.sql
        env:
          PGPASSWORD: geonatpasswd
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install GDAL
        run: |
          sudo apt update
          sudo apt install -y libgdal-dev
      - name: Install dependencies
        if: github.action_ref == 'master'
        run: |
          echo 'Installation des requirements de prod'
          python -m pip install --upgrade pip
          python -m pip install \
            -e ..[tests] \
            -r requirements.txt
        working-directory: ./backend
      - name: Install dependencies
        if: github.action_ref != 'master'
        run: |
          echo 'Installation des requirements de dev'
          python -m pip install --upgrade pip
          python -m pip install \
            -e ..[tests] \
            -r requirements-dev.txt
        working-directory: ./backend

      - name: Install core modules backend
        run: |
          pip install -e contrib/occtax
          pip install -e contrib/gn_module_occhab
          pip install -e contrib/gn_module_validation
      - name: Install gn_module_monitoring module
        run: |
          geonature install-gn-module ${{ github.workspace }}/extra/gn_module_monitoring --build false
        env:
          GEONATURE_CONFIG_FILE: '${{ github.workspace }}/config/test_config.toml'
      - name: Install ${{ github.event.repository.name }} module backend
        run: |
          geonature install-gn-module ${{ env.MODULE_DIR }} --build false
        env:
          GEONATURE_CONFIG_FILE: '${{ github.workspace }}/config/test_config.toml'
      - name: Show database status
        run: |
          geonature db status
        env:
          GEONATURE_CONFIG_FILE: config/test_config.toml
      - name: Install modules database
        run: |
          geonature db autoupgrade
          geonature upgrade-modules-db
        env:
          GEONATURE_CONFIG_FILE: config/test_config.toml
      - name: Show database status
        run: |
          geonature db status --dependencies
        env:
          GEONATURE_CONFIG_FILE: config/test_config.toml
      - name: Test with pytest
        run: |
          pytest -v --cov --cov-report xml
        working-directory: ${{ env.MODULE_DIR }}
        env:
          GEONATURE_CONFIG_FILE: ${{ github.workspace }}/config/test_config.toml
      - name: Show coverage
        run: |
          coverage report
        working-directory: ${{ env.MODULE_DIR }}
      - name: Upload coverage to Codecov
        if: ${{ env.upload_coverage && matrix.debian-version == '12' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.codecov_token }}
          flags: pytest
